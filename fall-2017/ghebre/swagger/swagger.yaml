swagger: '2.0'
info:
  description: This is Ghebre's User-Task API.
  version: 1.0.0
  title: Swagger Task api
  termsOfService: 'http://toddysm.com/terms/'
  contact:
    email: geberhane4@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: gebgebonline.com
basePath: /v2
tags:
  - name: User-Task
    description: This is an HTTP requests
schemes:
  - http
paths:
  /users:
    get:
      tags:
        - users
      summary: Get an existing user
      description: Getting list of user objects
      operationId: getUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User object that needs to be added
          required: false
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '404':
          description: User not found
    post:
      tags:
        - users
      summary: Add a new user
      description: Add list of user objects
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            User object that needs to be added having user object and returns
            user id
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '405':
          description: Invalid input
  '/users/{userId}':
    get:
      tags:
        - users
      summary: Find user by ID
      description: This request takes in user id and returns user object
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: userId in the path as an input
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user by ID
      description: >-
        Updating users by adding userId in the path and user object both as an
        input and returns nothing except a 200 http request response or other
        responses
      operationId: updateUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: userId as an input
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: user object as an input
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Invalid input
    delete:
      tags:
        - users
      summary: Delete user by ID
      description: >-
        Deleting users by adding userId in the path as an input and returns
        nothing except a 200 http request response or other responses
      operationId: deleteUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Invalid input
  '/users/{userId}/task':
    get:
      tags:
        - users
      summary: Find Tasks of user by ID
      description: This request takes in user id and returns array of tasks
      operationId: getTasksOfUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: user ID as an input
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task(s) not found
    post:
      tags:
        - users
      summary: Add Tasks of user by ID
      description: >-
        Getting tasks having user id and task object as an input and returns
        task id
      operationId: AddTasksOfUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user as an input
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: task object as input
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: successful operation
          schema:
            type: integer
            format: int64
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Invalid input
  '/users/{userId}/tasks/{taskId}':
    get:
      tags:
        - users
      summary: Find Tasks of user by ID for each user by id
      description: This request takes in user and task ids and returns task object
      operationId: getIdOfTasksOfUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: user ID as an input
          required: true
          type: integer
          format: int64
        - name: taskId
          in: path
          description: task ID as an input
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
    put:
      tags:
        - users
      summary: Update Id Tasks of user by ID
      description: >-
        This request takes in user and task ids plus task object and returns
        nothing except relevant http request responses such as Ok, id not found,
        or task not found
      operationId: updateIdTasksOfUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user as input
          required: true
          type: integer
          format: int64
        - name: taskId
          in: path
          description: ID of task as input
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Task object as input
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Invalid input
    delete:
      tags:
        - users
      summary: Delete Id Tasks of user by ID
      description: >-
        This request takes in user and task ids and returns nothing except
        relevant http request responses such as Ok, id not found, or task not
        found
      operationId: deleteIdTasksOfUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user as an input
          required: true
          type: integer
          format: int64
        - name: taskId
          in: path
          description: ID of task as an unput
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      tasks:
        $ref: '#/definitions/Task'
  Task:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      creationDate:
        type: string
        format: date-time
      dueDate:
        type: string
        format: date-time
      completionDate:
        type: string
        format: date-time
      status:
        type: string
        description: task status
        enum:
          - new
          - in progress
          - blocked
          - completed


